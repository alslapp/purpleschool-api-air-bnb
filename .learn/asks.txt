Вопросы:

*. NotifierModule - NotifierService.sendMessage: добавил switch, для отправки сообщений в разные каналы,
т.е при необходимости можно это расширить тут, и добавить соотв. шаблоны. Правильно сделал?

*. при создании/отмене брони сообщение в телегу отправляю из Контроллера BookingController, а не из BookingService.
Это правильный подход? Теоретически метод создания брони из BookingService может быть использован где то еще и не факт, что
нужно будет отправлять оповещения о создании/отмене брони.

*. так же в сервисе BookingService добавил свой метод BookingService.sendMessage, который вызвает в свою очередь
метод в сервисе NotifierService.sendMessage
это правильный подход? Создал метод обертку для того, чтобо обогатить сообщение нужными данными.
Соотв. для каждого модуля (где необходимо будет отправлять сообщения) будет подобный метод,
чтобы добавлять в шаблон нужные данные.

*. Вопрос скорее по TS: Использовать Объекты/массивы вместо Enum,
типа Enum в билде генерят что то страшное и могут быть какие то непредсказуемые ошибки -
интересно узнать от опытного разработчика, Да/нет

const Roles = {
	ADMIN: 'ADMIN',
	// 	...
} as const

type RoleKeys - typeof Roles[keyof typeof Roles];
// declare function hasAccess(role: RoleKeys): void;

Микросервисы:

*. для монорепы есть функционал у nestjs а есть разные пакеты, например NX, нужно ли их использовать? Т.к. я не увидел разницы
между nestjs и NX

*. Между TelegramModule и приложением сделал слой NotifierModule, а TelegramModule вынес в микросервис.
Вопрос по транспорту: RMQ или кафка? в 2-х словах - принципиальная разница есть, когда что использовать?
кроме файловых микросервисов

*. Если использовать монорепо, то при сборке контейнера для разных микросервисов в контейнер в итоге попадает весь ./dist с папками для всех микросервисов. Это как то решают в принципе?
или оставляют как есть?

Уточнения: 

1. т.е. ошибки в сервисе генерить нужно только нейтральный,
т.е. "new Error( CONST_TEXT_FOR_THIS_ERROR )"или просто "throw someObject",
а в котроллере ловить эту ошибку try catch и уже решать, как отдавать, в зависимости от транспорта

2. Я реально заморочился с ZOD, прочитал весь readme в https://github.com/risen228/nestjs-zod. 

В чем преимущества nest zod: позволяет избавиться от: 
	- кучи пайпов, 
	- class-validator class-transformer
т.е. это про валидацию и трансформацию данных?

3. nest zod используешь в боевых проектах давно?
то что nest zod написан не командой нест, в дальнейшем если плотно сесть на него, вдруг пакет затормозится в развитии,
придется слезать? + в nest zod используется далеко не последняя версия либы zod.